Project 4 Report
----------------
1) 
IntelWeb::ingest does not work with p4tester.cpp, but does work when tested manually using
the following code in main and a file Sources.txt:

	IntelWeb iw;
	iw.createNew("test-", 1000);
	iw.ingest("Sources.txt");

IntelWeb::purge does not work with p4tester.cpp, but does work when called in main.

IntelWeb::Crawl does not work with p4tester.cpp, but does work(somewhat) when called in main.

IntelWeb::Crawl will state every item in the indicators vector has been found, even if
it has been purged or did not exist. It will correctly indicate any associated items/interactions
have not been found if an item was purged

IntelWeb::crawl does not return the interactions in order and can contain duplicates

DiskMultiMap::Iterators do not become invalid when the DiskMultiMap is modified

Deleted nodes are not kept track of in DiskMultiMap.

2)
Each DiskMultiMap is stored on disk as an open hash table. Each file contains a header
with the number of buckets in hashtable. Each bucket acts as the head pointer of a linked
list.

The hash function used adds the ASCII value of each character in the string multiplied by its position,
performs a bitwise left shift on the result, then modulo assigns itself by the number of buckets

DiskMultiMap::insert generates a hash from the key, and goes to the bucket it corresponds to
It then goes to the last element  in the linked list ate the offset given by the value in 
the bucket and sets the last 4 bytes of the last node to the length of the file. A new
node is then written to the end of the file.

DiskMultiMap::search generates a hash from the key, finds the bucket it corresponds to,
constructs an iterator using the value stored in the bucket and returns that iterator

DiskMultiMap::erase generates a hash from the key and follows the linked list
corresponding to that hash to the node to be deleted. It tracks the offset of the
bytes that store the offset of the next node while iterating. When the node to be deleted
has been reached, the offset storing the location of the current node in the previous node
has the offset of the next node written to it. The current node is then inaccessible
from the bucket generated by the key. It continues iterating and repeats this as necessary.
In the case that the first node is deleted, the value in the bucket is changed to the offset
of the next node.

DiskMultiMap::Iterator::operator++ if the iterator is invalid or contains the offset 0,
it sets itself to invalid and returns *this. Otherwise it reads the data 360 bytes from
the offset the iterator contains, then sets it's stored offset to the value read.

DiskMultiMap::Iterator::operator* reads the first 120 bytes from the stored offset
into the key field of a MultiMapTuple, the next 120 into the value field, and the next
120 bytes into the context field. It then returns the MultiMapTuple

IntelWeb creates 2 DiskMultiMaps on disk, one one mapping from initiator entity to the
contacted, created or downloaded entity and the machine the iteraction occured on,
and one containing the reverse of this mapping and the machine the interaction occured on

IntelWeb::ingest uses an ifstream to open a file, reads each line and splits each line at
the spaces, then inserts the strings extracted into the DiskMultiMaps, then returns true.
The function returns false if the file could not be opened.

IntelWeb::crawl uses two in RAM hashtables to store the names ob any entities the objects 
in the indicators vector interact with and how many times they occur. Any entities that
do not meet the threshold to be considered good are pushed into badEntitiesFound.
badEntitiesFound is sorted. Every entity in badEntitiesFound has each interaction (found 
using DiskMultiMaps) pushed into the interactions vector. The function then returns the
size of badEntitiesFound

IntelWeb::purge finds every element in each DiskMultiMap with the parameter as a key
and deletes it and returns true. If no matching element was found, it returns false.

3)
DiskMultiMap::createNew() meets the O(B) requirement
DiskMultiMap::OpenExisting() meets the O(1) requirement
DiskMultiMap::close() meets the O(1) requirement
DiskMultiMap::insert() meets the O(K) requirement
DiskMultiMap::search() meets the O(N/B) requirement
DiskMultiMap::erase() meets the O(K) requirement
DiskMultiMap::Iterator::Iterator() meets the O(1) requirement
DiskMultiMap::Iterator::isValid() meets the O(1) requirement
DiskMultiMap::Iterator::operator++() meets the O(N/B) requirement
DiskMultiMap::Iterator::operator*() meets the O(1) requirement
IntelWeb::createNew() meets the O(maxDataItems) requirement
IntelWeb::openExisting() meets the O(1) requirement
IntelWeb::close() meets the O(1) requirement
IntelWeb::ingest() meets the O(N) requirement
IntelWeb::openExisting() does NOT meet the O(T) requirement it is O(T*M) where M
			 is the total number of malicious entities found
IntelWeb::purge() meets the O(M) requirement